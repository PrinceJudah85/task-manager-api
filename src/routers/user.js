const express = require('express')
const multer = require('multer') // importing multer for file uploads
const sharp = require('sharp') // importing sharp for image resizing/formating
const User = require('../models/user')
const auth = require('../middleware/auth')// importing auth middleware
const router = new express.Router() // Create new router


// Setup Routes 
  
// Create new user route
router.post('/users', async (req, res) => { // each request has the same call signature => app.httpREQType('/path', (request, response) => {})
  const user = new User(req.body)

  try {
    await user.save()
    const token = await user.generateAuthToken()
    res.status(201).send({user, token})
  } catch (e) {
    res.status(400).send(e)
  }
})

// login user router
router.post('/users/login', async (req, res) => {
  try {
    const user = await User.findByCredentials(req.body.email, req.body.password)
    const token = await user.generateAuthToken() // the token being generated by generateAuthToken() is specific to the instance of a User and not User as a whole, we use the 'user' variable instead. 
    res.send({user, token})
  } catch (e) {
    res.status(400).send()
  }
})

// Logs out user from current device
router.post('/users/logout', auth, async (req, res) => { //Passing auth middleware to a specific route as the 2nd argument. After the route path but before the route handler function
  try {
    req.user.tokens = req.user.tokens.filter((token) => { // re-assigning the tokens array found in the current user to a filtered array that consists of all items that DON'T INCLUDE the token that was grabbed during authentication. 
      return token.token !== req.token
    })
    
    await req.user.save()

    res.send()
  } catch (e) {
    res.status(500).send()
  }
})

// Logs out user from all devices
router.post('/users/logoutAll', auth, async (req, res) => {
  try {
    req.user.tokens = [] // clears all tokens from tokens array 
    await req.user.save()
    res.send()
  } catch (e) {
    res.status(500).send()
  }
})

// returns user profile
router.get('/users/me', auth, async (req, res) => {
    res.send(req.user)
})

// update user profile
router.patch('/users/me', auth, async (req, res) => {
  const updates = Object.keys(req.body)
  const userProps = req.user.toObject()
  const allowedUpdates = Object.keys(userProps).filter(e => e !== '_id' && e !== '__v' && e !== 'tokens')
  //const allowedUpdates = ['name', 'age', 'email', 'password']
  const isValidOperation = updates.every((update) => allowedUpdates.includes(update))

  if (!isValidOperation) {
    return res.status(400).send({error: 'Invalid updates!'})
  }

  try {
    updates.forEach((update) => req.user[update] = req.body[update])
    // password hashing middleware is applied right here (pre-save) //
    await req.user.save()
    res.send(req.user)
  } catch (e) {
    res.status(400).send()
  }
})

// delete user profile

router.delete('/users/me', auth, async (req, res) => {
  try {
    await req.user.remove()
    res.send(req.user)
  } catch (e) {
    res.status(500).send()
  }
})

// Setting up file upload (multer) middleware function
const upload = multer({
  limits: {
    fileSize: 1000000
  },
  fileFilter(req, file, cb) {
    if (!file.originalname.match(/\.(jpg|jpeg|png)$/)) {
      return cb(new Error('Please upload an image'))
    }

    cb(undefined, true)
  }
})

// Create user avatar route 
router.post('/users/me/avatar', auth, upload.single('avatar'), async (req, res) => { // Route handler for receiving client file uploads does not get access to the uploaded file data if 'Dest' property exists in the Multer options object found in 'upload' variable. 
  // req.user.avatar = req.file.buffer
  const buffer = await sharp(req.file.buffer).resize({width: 250, height: 250}).png().toBuffer()
  req.user.avatar = buffer
  await req.user.save()
  res.send()
}, (error, req, res, next) => {
    res.status(400).send({ error: error.message })
})

// Get user avatar route 
router.get('/users/:id/avatar', async (req, res) => {
  try {
    const user = await User.findById(req.params.id)

    if (!user || !user.avatar) {
      throw new Error()
    }

    res.set('Content-Type', 'image/png')
    res.send(user.avatar)
  } catch (e) {
    res.status(400).send()
  }
})

// Delete user avatar route
router.delete('/users/me/avatar', auth, async (req, res) => {
  req.user.avatar = undefined
  await req.user.save()
  res.send()
})

module.exports = router